/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/PrasadG193/cbt-datapath-aggapi/pkg/apis/cbt/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeSnapshotDeltaTokenLister helps list VolumeSnapshotDeltaTokens.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaTokenLister interface {
	// List lists all VolumeSnapshotDeltaTokens in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaToken, err error)
	// VolumeSnapshotDeltaTokens returns an object that can list and get VolumeSnapshotDeltaTokens.
	VolumeSnapshotDeltaTokens(namespace string) VolumeSnapshotDeltaTokenNamespaceLister
	VolumeSnapshotDeltaTokenListerExpansion
}

// volumeSnapshotDeltaTokenLister implements the VolumeSnapshotDeltaTokenLister interface.
type volumeSnapshotDeltaTokenLister struct {
	indexer cache.Indexer
}

// NewVolumeSnapshotDeltaTokenLister returns a new VolumeSnapshotDeltaTokenLister.
func NewVolumeSnapshotDeltaTokenLister(indexer cache.Indexer) VolumeSnapshotDeltaTokenLister {
	return &volumeSnapshotDeltaTokenLister{indexer: indexer}
}

// List lists all VolumeSnapshotDeltaTokens in the indexer.
func (s *volumeSnapshotDeltaTokenLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDeltaToken))
	})
	return ret, err
}

// VolumeSnapshotDeltaTokens returns an object that can list and get VolumeSnapshotDeltaTokens.
func (s *volumeSnapshotDeltaTokenLister) VolumeSnapshotDeltaTokens(namespace string) VolumeSnapshotDeltaTokenNamespaceLister {
	return volumeSnapshotDeltaTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeSnapshotDeltaTokenNamespaceLister helps list and get VolumeSnapshotDeltaTokens.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaTokenNamespaceLister interface {
	// List lists all VolumeSnapshotDeltaTokens in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaToken, err error)
	// Get retrieves the VolumeSnapshotDeltaToken from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VolumeSnapshotDeltaToken, error)
	VolumeSnapshotDeltaTokenNamespaceListerExpansion
}

// volumeSnapshotDeltaTokenNamespaceLister implements the VolumeSnapshotDeltaTokenNamespaceLister
// interface.
type volumeSnapshotDeltaTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeSnapshotDeltaTokens in the indexer for a given namespace.
func (s volumeSnapshotDeltaTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDeltaToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDeltaToken))
	})
	return ret, err
}

// Get retrieves the VolumeSnapshotDeltaToken from the indexer for a given namespace and name.
func (s volumeSnapshotDeltaTokenNamespaceLister) Get(name string) (*v1alpha1.VolumeSnapshotDeltaToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("volumesnapshotdeltatoken"), name)
	}
	return obj.(*v1alpha1.VolumeSnapshotDeltaToken), nil
}
